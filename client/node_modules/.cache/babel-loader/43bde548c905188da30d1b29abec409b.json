{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n/*collectionRef.get().then( async snapshot => {\r\n\tconst collectionMap = convertCollectionsSnapshotToMap(snapshot);\r\n\tdispatch(fetchCollectionsSuccess(collectionMap));\r\n}).catch(error => dispatch(fetchCollectionsFailure(error.message)))*/\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n;\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["E:\\javascript\\crwn-clothing\\client\\src\\redux\\shop\\shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACxC,MAAI;AACH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAChCI,+BADgC,EAEhCO,QAFgC,CAAjC;AAIA,UAAMV,GAAG,CAACI,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACA,GARD,CAQE,OAAOC,KAAP,EAAc;AACf,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACA;AACD;AACC;;;;;AAMF,OAAO,UAAUC,qBAAV,GAAkC;AACxC,QAAMjB,UAAU,CACfQ,eAAe,CAACU,uBADD,EAEfT,qBAFe,CAAhB;AAIA;AAAA;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC5B,QAAMhB,GAAG,CAAC,CACTF,IAAI,CAACgB,qBAAD,CADK,CAAD,CAAT;AAGA","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n\ttry {\r\n\t\tconst collectionRef = firestore.collection('collections');\r\n\t\tconst snapshot = yield collectionRef.get();\r\n\t\tconst collectionsMap = yield call(\r\n\t\t\tconvertCollectionsSnapshotToMap, \r\n\t\t\tsnapshot\r\n\t\t);\r\n\t\tyield put(fetchCollectionsSuccess(collectionsMap))\r\n\t} catch (error) {\r\n\t\tyield put(fetchCollectionsFailure(error.message))\r\n\t}\r\n}\r\n\t\t/*collectionRef.get().then( async snapshot => {\r\n\t\t\tconst collectionMap = convertCollectionsSnapshotToMap(snapshot);\r\n\t\t\tdispatch(fetchCollectionsSuccess(collectionMap));\r\n\t\t}).catch(error => dispatch(fetchCollectionsFailure(error.message)))*/\r\n\r\n\r\nexport function* fetchCollectionsStart() {\r\n\tyield takeLatest(\r\n\t\tShopActionTypes.FETCH_COLLECTIONS_START,\r\n\t\tfetchCollectionsAsync\r\n\t);\r\n};\r\n\r\nexport function* shopSagas() {\r\n\tyield all([\r\n\t\tcall(fetchCollectionsStart)\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}